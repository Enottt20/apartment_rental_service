version: '1.0'
services:
  postgresql:
    image: postgis/postgis:latest
    container_name: postgis
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres"]
      interval: 30s
      timeout: 120s
      retries: 5
      start_period: 30s


  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"  # Порт для AMQP
      - "15672:15672"  # Порт для веб-интерфейса
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    

  mongo:
    image: mongo:7.0
    volumes:
      - mongo-data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: mongo
      MONGO_USER: ${MONGO_USER:-mongo}
      MONGO_PASSWORD: ${MONGO_PASSWORD:-mongo}


  policy-enforcement-service:
    build:
      context: ../Services/policy-enforcement-service
      dockerfile: ./Dockerfile
    ports:
      - "5100:5100"
    depends_on:
      - favorite-service
      - apartment-service
      - user-service
      - review-service
      - reservation-service
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      JWT_SECRET: ${JWT_SECRET:-JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH:-/mnt/policies.yaml}
    

  favorite-service:
    build:
      context: ../Services/favorite-service
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "5001:5001"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN:-postgresql://postgres:postgres@postgresql:5432/postgres}
    
    

  apartment-service:
    build:
      context: ../Services/apartment-service
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "5002:5002"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN:-postgresql://postgres:postgres@postgresql:5432/postgres}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

    

  user-service:
    build:
      context: ../Services/user-service
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "5003:5003"
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - user-service-data:/mnt/
    environment:
      POSTGRES_DSN: ${POSTGRES_DB_ASYNC_DSN:-postgresql+asyncpg://postgres:postgres@postgresql:5432/postgres}
      JWT_SECRET: ${JWT_SECRET:-JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET:-RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET:-VERIFICATION_TOKEN_SECRET}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH:-/mnt/default-groups.json}

    
  review-service:
    build:
      context: ../Services/review-service
      dockerfile: ./Dockerfile
    ports:
      - "5004:5004"
    depends_on:
      - mongo
    environment:
      MONGO_DSN: ${MONGO_DSN:-mongodb://mongo:mongo@mongo:27017/mongo}
      APARTMENT_SERVICE_ENTRYPOINT: ${APARTMENT_SERVICE_ENTRYPOINT:-http://apartment-service:5002/}
      RABBITMQ_DSN: ${RABBITMQ_DSN:-amqp://guest:guest@rabbitmq//}
      QUEUE_REVIEW_NAME: ${QUEUE_REVIEW_NAME:-notification publish review}
      EXCHANGE_NAME: ${EXCHANGE_NAME:-notification}



    
  
  reservation-service:
    build:
      context: ../Services/reservation-service
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "5005:5005"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN:-postgresql://postgres:postgres@postgresql:5432/postgres}
      APARTMENT_SERVICE_ENTRYPOINT: ${APARTMENT_SERVICE_ENTRYPOINT:-http://apartment-service:5002/}
      RABBITMQ_DSN: ${RABBITMQ_DSN:-amqp://guest:guest@rabbitmq//}
      QUEUE_RESERVATION_NAME: ${QUEUE_RESERVATION_NAME:-notification apartment rental}
      EXCHANGE_NAME: ${EXCHANGE_NAME:-notification}



  notification-service:
    build:
      context: ../Services/notification-service
      dockerfile: ./Dockerfile
    ports:
      - "5006:5006"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      SMTP_SERVER: ${SMTP_SERVER:-smtp.yandex.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      EMAIL_LOGIN: ${EMAIL_LOGIN:-yantestsss22@yandex.ru}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-pfxgsdpenvktcvtv}
      IS_SMPT_SSL: ${IS_SMPT_SSL:-False}
      RABBITMQ_DSN: ${RABBITMQ_DSN:-amqp://guest:guest@rabbitmq//}
      QUEUE_RESERVATION_NAME: ${QUEUE_RESERVATION_NAME:-notification apartment rental}
      QUEUE_REVIEW_NAME: ${QUEUE_REVIEW_NAME:-notification publish review}

  

  tests:
    build:
      context: ../Tests
      dockerfile: ./Dockerfile
    depends_on:
      - apartment-service
      - policy-enforcement-service
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN:-postgresql://postgres:postgres@postgresql:5432/postgres}
      APARTMENT_SERVICE_ENTRYPOINT: ${APARTMENT_SERVICE_ENTRYPOINT:-http://apartment-service:5002/}
      POLICY_SERVICE_ENTRYPOINT: ${POLICY_SERVICE_ENTRYPOINT:-http://policy-enforcement-service:5100/}
    


volumes:
  postgres_data:
  mongo-data:
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-data
  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service