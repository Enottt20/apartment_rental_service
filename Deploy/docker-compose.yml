version: '1.0'
services:
  postgresql:
    image: postgis/postgis:latest
    container_name: postgis
    environment:
      POSTGRES_DB: ${POSTGRES_DB}  # Имя вашей базы данных
      POSTGRES_USER: ${POSTGRES_USER}    # Имя пользователя базы данных
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Пароль пользователя базы данных
    ports:
      - 5432:5432  # Маппинг портов (локальный порт: порт в контейнере)
    volumes:
      - postgres_data:/var/lib/postgresql/data


  rabbitmq:
    image: "rabbitmq:3-management"  # Используем образ с веб-интерфейсом для удобного мониторинга
    ports:
      - "5672:5672"  # Порт для AMQP
      - "15672:15672"  # Порт для веб-интерфейса
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    

  mongo:
    image: mongo:7.0
    volumes:
      - mongo-data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: mongo
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    


  policy-enforcement-service:
    build:
      context: ../Services/policy-enforcement-service
      dockerfile: ./Dockerfile
    ports:
      - "5100:5100"
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    

  favorite-service:
    build:
      context: ../Services/favorite-service
      dockerfile: ./Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      - postgresql
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
    

  apartment-service:
    build:
      context: ../Services/apartment-service
      dockerfile: ./Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      - postgresql
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
    

  user-service:
    build:
      context: ../Services/user-service
      dockerfile: ./Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      - postgresql
    volumes:
      - user-service-data:/mnt/
    environment:
      POSTGRES_DSN: ${POSTGRES_DB_ASYNC_DSN}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH}

    
  review-service:
    build:
      context: ../Services/review-service
      dockerfile: ./Dockerfile
    ports:
      - "5004:5004"
    depends_on:
      - mongo
    environment:
      MONGO_DSN: ${MONGO_DSN}

    
  
  reservation-service:
    build:
      context: ../Services/reservation-service
      dockerfile: ./Dockerfile
    ports:
      - "5005:5005"
    depends_on:
      - postgresql
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      APARTMENT_SERVICE_ENTRYPOINT: ${APARTMENT_SERVICE_ENTRYPOINT}
      RABBITMQ_DSN: ${RABBITMQ_DSN}
      QUEUE_NAME: ${QUEUE_NAME_NOTIFICATION}
      EXCHANGE_NAME: ${EXCHANGE_NAME_NOTIFICATION}



  notification-service:
    build:
      context: ../Services/notification-service
      dockerfile: ./Dockerfile
    ports:
      - "5006:5006"
    depends_on:
      - rabbitmq
    environment:
      QUEUE_NAME: ${QUEUE_NAME_NOTIFICATION}
      RABBITMQ_DSN: ${RABBITMQ_DSN}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_LOGIN: ${EMAIL_LOGIN}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SERVER: ${SMTP_SERVER}
      IS_SMPT_SSL: ${IS_SMPT_SSL}

  
  tests:
    build:
      context: ../Tests
      dockerfile: ./Dockerfile
    depends_on:
      - policy-enforcement-service
      - apartment-service
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
      APARTMENT_SERVICE_ENTRYPOINT: ${APARTMENT_SERVICE_ENTRYPOINT}
      POLICY_SERVICE_ENTRYPOINT: ${POLICY_SERVICE_ENTRYPOINT}


    


volumes:
  postgres_data:
  mongo-data:
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-data
  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service